pipeline TemperaturesPipeline {

    TemperaturesHttpExtractor
        -> ZipArchiveInterpreter
        -> TemperaturesFilePicker
        -> TemperaturesTextInterpreter
        -> TemperaturesCSVInterpreter
        -> TemperaturesCellWriter
        -> BatteryCellWriter
        -> DataValidation
        -> CelsiusToFahrenheitTransformer1
        -> CelsiusToFahrenheitTransformer2
        -> TemperaturesLoader;


    block TemperaturesHttpExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
        retries: 4;
    }

    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }
    block TemperaturesFilePicker oftype FilePicker {
        path: "./data.csv";
    }
    block TemperaturesTextInterpreter oftype TextFileInterpreter {}

    block TemperaturesCSVInterpreter oftype CSVInterpreter {
        delimiter: ";"; // dataset uses semicolon as delimiter
	}


    block TemperaturesCellWriter oftype CellWriter {
        at: range A1:F1;  
        write: ["id",
                "producer",
                "model",
                "month",
                "temperature",
                "battery_temperature"];
    }

    // I tried to delete the in-between cols but it didn't work
    block BatteryCellWriter oftype CellWriter {
        at: cell J1; 
        write: ["battery_temperature"];
    }

    //  C to F 
    transform CelsuisToFahrenheit {
        from tempCelsius oftype decimal;
        to tempFahrenheit oftype decimal;

        tempFahrenheit: tempCelsius * 9/5 + 32;
    }

    // Apply transformation
    block CelsiusToFahrenheitTransformer1 oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        uses: CelsuisToFahrenheit;
    }

    // apply battery temperature conversion
    block CelsiusToFahrenheitTransformer2 oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature";
        uses: CelsuisToFahrenheit;
    }

    // Constraint for Positive Integer for `id` variable
    valuetype PostiveInteger oftype integer {
        constraints: [PositiveIntegerConstraint];
    }
	
    constraint PositiveIntegerConstraint on integer:
        value > 0;

    // Validation 
    block DataValidation oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PostiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    block TemperaturesLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}